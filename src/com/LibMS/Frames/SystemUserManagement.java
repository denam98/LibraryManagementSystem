/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.LibMS.Frames;

import com.LibMS.Common.DBConnect;
import com.LibMS.Common.PasswordEncription;
import com.LibMS.Common.SystemLogger;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author B.M.D.C.Bandara
 */
public class SystemUserManagement extends javax.swing.JFrame {

    boolean passCheck;
    String newUser;
    String empID;

    /**
     * Creates new form SystemUserManagement
     */
    public SystemUserManagement() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from class constructor", ex);
        }
        initComponents();
        setLocationRelativeTo(null);
        LoadTableData();
        setButtons();
        jLabel1.grabFocus();
        setImage(new File("pics/sysUser1.jpg"), lab_image);
        update_user_layer.setVisible(false);
        add_user_layer.setVisible(false);
        jScrollPane3.setVisible(false);
        jCheckBox1.setSelected(true);
        view.start();
        view2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lab_image = new javax.swing.JLabel();
        view_user_layer = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        cb_searchCategory = new javax.swing.JComboBox<>();
        txt_search = new javax.swing.JTextField();
        but_addMem = new javax.swing.JButton();
        but_viewUpdateMem = new javax.swing.JButton();
        add_user_layer = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        txt_ID = new javax.swing.JTextField();
        txt_username = new javax.swing.JTextField();
        but_add = new javax.swing.JButton();
        but_back = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pass_pass1 = new javax.swing.JPasswordField();
        pass_pass2 = new javax.swing.JPasswordField();
        lab_errorNic = new javax.swing.JLabel();
        lab_errorUname = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        lab_passerror = new javax.swing.JLabel();
        lab_passerror1 = new javax.swing.JLabel();
        lab_img_checkpass = new javax.swing.JLabel();
        rb_add_active = new javax.swing.JRadioButton();
        rb_add_inactive = new javax.swing.JRadioButton();
        update_user_layer = new javax.swing.JLayeredPane();
        lab_passerror2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pass_pass3 = new javax.swing.JPasswordField();
        txt_uname = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        lab_passerror3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lab_name = new javax.swing.JTextField();
        rb_active = new javax.swing.JRadioButton();
        but_back1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lab_nameerror = new javax.swing.JLabel();
        rb_inactive = new javax.swing.JRadioButton();
        lab_nic = new javax.swing.JTextField();
        but_update = new javax.swing.JButton();
        lab_img_checkpass1 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        pass_pass4 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("System Users");
        jLayeredPane1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 260, 40));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("View");
        jLayeredPane1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 260, 40));
        jLayeredPane1.add(lab_image, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 768));

        view_user_layer.setBackground(new java.awt.Color(255, 255, 255));
        view_user_layer.setOpaque(true);
        view_user_layer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "USER ID ", "FIRST NAME ", "LAST NAME", "USER NAME", "NIC", "MOBILE No", "GENDER", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        view_user_layer.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 920, 390));

        jButton5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 102, 255));
        jButton5.setText("Home");
        jButton5.setBorderPainted(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        view_user_layer.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, -1, -1));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        view_user_layer.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, 10, 35));

        jButton6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(153, 153, 153));
        jButton6.setText("Member");
        jButton6.setBorderPainted(false);
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        view_user_layer.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 90, -1));

        cb_searchCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "First Name", "User Name", "NIC", "Mobile No." }));
        view_user_layer.add(cb_searchCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 170, 70, 30));

        txt_search.setText("Search");
        txt_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchFocusLost(evt);
            }
        });
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        view_user_layer.add(txt_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 170, 180, 30));

        but_addMem.setBackground(new java.awt.Color(255, 255, 255));
        but_addMem.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_addMem.setText("Add System User");
        but_addMem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_addMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_addMemActionPerformed(evt);
            }
        });
        view_user_layer.add(but_addMem, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 185, 41));

        but_viewUpdateMem.setBackground(new java.awt.Color(255, 255, 255));
        but_viewUpdateMem.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_viewUpdateMem.setText("View / Update System User");
        but_viewUpdateMem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_viewUpdateMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_viewUpdateMemActionPerformed(evt);
            }
        });
        view_user_layer.add(but_viewUpdateMem, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 640, 230, 42));

        jLayeredPane1.add(view_user_layer, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 966, 768));

        add_user_layer.setBackground(new java.awt.Color(255, 255, 255));
        add_user_layer.setOpaque(true);
        add_user_layer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        add_user_layer.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 207, 300, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Employee Name");
        add_user_layer.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 133, 28));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Employee NIC");
        add_user_layer.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 133, 28));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("User Name");
        add_user_layer.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, 133, 28));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setText("Password");
        add_user_layer.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 330, 133, 28));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Re-type Password");
        add_user_layer.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 380, 133, 28));

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Status");
        add_user_layer.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, 133, 28));

        txt_name.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nameActionPerformed(evt);
            }
        });
        txt_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_nameKeyReleased(evt);
            }
        });
        add_user_layer.add(txt_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, 300, -1));

        txt_ID.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_IDActionPerformed(evt);
            }
        });
        txt_ID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_IDKeyPressed(evt);
            }
        });
        add_user_layer.add(txt_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 300, -1));

        txt_username.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernameActionPerformed(evt);
            }
        });
        txt_username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_usernameKeyPressed(evt);
            }
        });
        add_user_layer.add(txt_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 280, 300, -1));

        but_add.setBackground(new java.awt.Color(51, 123, 255));
        but_add.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_add.setText("ADD");
        but_add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_add.setOpaque(false);
        but_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_addActionPerformed(evt);
            }
        });
        but_add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                but_addKeyPressed(evt);
            }
        });
        add_user_layer.add(but_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 530, 120, 40));

        but_back.setBackground(new java.awt.Color(51, 123, 255));
        but_back.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_back.setText("Back");
        but_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_back.setOpaque(false);
        but_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_backActionPerformed(evt);
            }
        });
        add_user_layer.add(but_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 530, 150, 40));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add_user_layer.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 530, 10, 40));

        pass_pass1.setText("Enter New Password");
        pass_pass1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pass_pass1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pass_pass1FocusLost(evt);
            }
        });
        pass_pass1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pass_pass1ActionPerformed(evt);
            }
        });
        pass_pass1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pass_pass1KeyPressed(evt);
            }
        });
        add_user_layer.add(pass_pass1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, 300, 30));

        pass_pass2.setText("Re-type Password");
        pass_pass2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pass_pass2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pass_pass2FocusLost(evt);
            }
        });
        pass_pass2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pass_pass2ActionPerformed(evt);
            }
        });
        pass_pass2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pass_pass2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pass_pass2KeyReleased(evt);
            }
        });
        add_user_layer.add(pass_pass2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 300, 30));

        lab_errorNic.setForeground(new java.awt.Color(255, 102, 102));
        add_user_layer.add(lab_errorNic, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 260, 250, 20));

        lab_errorUname.setForeground(new java.awt.Color(255, 102, 102));
        add_user_layer.add(lab_errorUname, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 310, 250, 20));

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setText("Show Password");
        add_user_layer.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, -1, 30));

        lab_passerror.setBackground(new java.awt.Color(255, 255, 255));
        lab_passerror.setForeground(new java.awt.Color(255, 102, 102));
        add_user_layer.add(lab_passerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, 250, 20));

        lab_passerror1.setBackground(new java.awt.Color(255, 255, 255));
        lab_passerror1.setForeground(new java.awt.Color(255, 102, 102));
        add_user_layer.add(lab_passerror1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, 240, 20));
        add_user_layer.add(lab_img_checkpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 390, 15, 15));

        rb_add_active.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_add_active);
        rb_add_active.setText("Active");
        rb_add_active.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_add_activeKeyPressed(evt);
            }
        });
        add_user_layer.add(rb_add_active, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 440, -1, -1));

        rb_add_inactive.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_add_inactive);
        rb_add_inactive.setText("Inactive");
        rb_add_inactive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_add_inactiveKeyPressed(evt);
            }
        });
        add_user_layer.add(rb_add_inactive, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, -1, -1));

        jLayeredPane1.add(add_user_layer, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 966, 768));

        update_user_layer.setBackground(new java.awt.Color(255, 255, 255));
        update_user_layer.setOpaque(true);
        update_user_layer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lab_passerror2.setBackground(new java.awt.Color(255, 255, 255));
        lab_passerror2.setForeground(new java.awt.Color(255, 102, 102));
        update_user_layer.add(lab_passerror2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, 250, 20));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Employee NIC");
        update_user_layer.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 133, 28));

        pass_pass3.setText("Enter New Password");
        pass_pass3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pass_pass3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pass_pass3FocusLost(evt);
            }
        });
        pass_pass3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pass_pass3ActionPerformed(evt);
            }
        });
        pass_pass3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pass_pass3KeyPressed(evt);
            }
        });
        update_user_layer.add(pass_pass3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, 300, 30));

        txt_uname.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_unameActionPerformed(evt);
            }
        });
        txt_uname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_unameKeyTyped(evt);
            }
        });
        update_user_layer.add(txt_uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 280, 300, -1));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        update_user_layer.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 530, 10, 40));

        lab_passerror3.setBackground(new java.awt.Color(255, 255, 255));
        lab_passerror3.setForeground(new java.awt.Color(255, 102, 102));
        update_user_layer.add(lab_passerror3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, 250, 20));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("User Name");
        update_user_layer.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, 133, 28));

        lab_name.setEditable(false);
        lab_name.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lab_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_nameActionPerformed(evt);
            }
        });
        lab_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lab_nameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_nameKeyReleased(evt);
            }
        });
        update_user_layer.add(lab_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, 300, -1));

        rb_active.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rb_active);
        rb_active.setText("Active");
        rb_active.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_activeKeyPressed(evt);
            }
        });
        update_user_layer.add(rb_active, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 440, -1, -1));

        but_back1.setBackground(new java.awt.Color(51, 123, 255));
        but_back1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_back1.setText("Back");
        but_back1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_back1.setOpaque(false);
        but_back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_back1ActionPerformed(evt);
            }
        });
        update_user_layer.add(but_back1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 530, 150, 40));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("Employee Name");
        update_user_layer.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 133, 28));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setText("Status");
        update_user_layer.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, 133, 28));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Password");
        update_user_layer.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 330, 133, 28));

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setText("Re-type Password");
        update_user_layer.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 380, 133, 28));

        lab_nameerror.setForeground(new java.awt.Color(255, 102, 102));
        update_user_layer.add(lab_nameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 310, 250, 20));

        rb_inactive.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rb_inactive);
        rb_inactive.setText("Inactive");
        rb_inactive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_inactiveKeyPressed(evt);
            }
        });
        update_user_layer.add(rb_inactive, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, -1, -1));

        lab_nic.setEditable(false);
        lab_nic.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lab_nic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_nicActionPerformed(evt);
            }
        });
        lab_nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lab_nicKeyPressed(evt);
            }
        });
        update_user_layer.add(lab_nic, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 300, -1));

        but_update.setBackground(new java.awt.Color(51, 123, 255));
        but_update.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        but_update.setText("Update");
        but_update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_update.setOpaque(false);
        but_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_updateActionPerformed(evt);
            }
        });
        but_update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                but_updateKeyPressed(evt);
            }
        });
        update_user_layer.add(but_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 530, 120, 40));
        update_user_layer.add(lab_img_checkpass1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 390, 15, 15));

        jCheckBox2.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setText("Show Password");
        update_user_layer.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 380, -1, 30));

        pass_pass4.setText("Re-type Password");
        pass_pass4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pass_pass4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pass_pass4FocusLost(evt);
            }
        });
        pass_pass4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pass_pass4ActionPerformed(evt);
            }
        });
        pass_pass4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pass_pass4KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pass_pass4KeyReleased(evt);
            }
        });
        update_user_layer.add(pass_pass4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 300, 30));

        jLayeredPane1.add(update_user_layer, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 966, 768));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void txt_searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusGained
        txt_search.setText(null);
    }//GEN-LAST:event_txt_searchFocusGained

    private void txt_searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusLost
        txt_search.setText("Search");
    }//GEN-LAST:event_txt_searchFocusLost

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        searchUser();
    }//GEN-LAST:event_txt_searchActionPerformed

    private void but_addMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_addMemActionPerformed
        view_user_layer.setVisible(false);
        update_user_layer.setVisible(false);
        add_user_layer.setVisible(true);
        jLabel2.setText("Add");
        jLabel1.setText("System User");
    }//GEN-LAST:event_but_addMemActionPerformed

    String id;

    private void but_viewUpdateMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_viewUpdateMemActionPerformed
        if (jTable1.getSelectedRow() != -1 && jTable1.getSelectedRowCount() == 1) {
            update_user_layer.setVisible(true);
            add_user_layer.setVisible(false);
            view_user_layer.setVisible(false);
            jLabel2.setText("Update");
            jLabel1.setText("System User");

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            id = dtm.getValueAt(jTable1.getSelectedRow(), 0).toString();

            try {
                ResultSet search = DBConnect.search("select e.*,s.username,s.password,s.stat as status from employee e inner join systemuser s "
                        + "on e.id = s.employee_id where s.id='" + id + "'");
                if (search.first()) {
                    username = search.getString("username");
                    password = PasswordEncription.decrypt(search.getString("password"));
                    lab_name.setText(search.getString("fname") + " " + search.getString("lname"));
                    txt_uname.setText(search.getString("username"));
                    lab_nic.setText(search.getString("nic"));
                    pass_pass3.setText(password);
                    pass_pass4.setText(password);
                    if (search.getInt("status") == 1) {
                        rb_active.setSelected(true);
                    } else {
                        rb_inactive.setSelected(true);
                    }
                } else {
                    System.out.println("Empty ResultSet!");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select a user from the table to view or update.");
        }
    }//GEN-LAST:event_but_viewUpdateMemActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 2 && jList1.getFirstVisibleIndex() != -1) {
            jScrollPane3.setVisible(false);
            newUser = jList1.getSelectedValue();
            txt_name.setText(newUser.split("-")[0]);
            txt_ID.setText(newUser.split("-")[1]);
            txt_username.grabFocus();
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && jList1.getFirstVisibleIndex() != -1) {
            newUser = jList1.getSelectedValue();
            txt_name.setText(newUser.split("-")[0]);
            empID = newUser.split("-")[1];
            txt_ID.setText(empID);
            txt_username.grabFocus();
            jScrollPane3.setVisible(false);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP && jList1.getSelectedIndex() == 0) {
            jScrollPane3.setVisible(false);
            txt_name.grabFocus();
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void txt_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN && txt_name.getText().equals("")) {
//            jList1.grabFocus();
//            jList1.setSelectedIndex(0);
            txt_ID.grabFocus();
            jScrollPane3.setVisible(false);
        } else {
            jList1.grabFocus();
            jList1.setSelectedIndex(0);
        }
    }//GEN-LAST:event_txt_nameKeyPressed

    private void txt_IDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_IDKeyPressed
        if ((evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105) || (evt.getKeyCode() >= 48
                && evt.getKeyCode() <= 57) || evt.getKeyCode() == KeyEvent.VK_BACKSPACE
                || evt.getKeyCode() == KeyEvent.VK_ENTER || (evt.getKeyCode() == KeyEvent.VK_V && !txt_ID.getText().contains("v"))
                || (!txt_ID.getText().contains("v") && txt_ID.getText().length() <= 12) || evt.getKeyCode() == KeyEvent.VK_UP) {

            txt_ID.setEditable(true);
            lab_errorNic.setText(null);

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (!txt_ID.getText().trim().equals("") || txt_ID.getText() != null) {
                    txt_username.grabFocus();
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                txt_name.grabFocus();
            }
        } else {
            txt_ID.setEditable(false);
        }
    }//GEN-LAST:event_txt_IDKeyPressed

    private void txt_usernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_usernameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            txt_username.setEditable(false);
        } else {
            txt_username.setEditable(true);
            lab_errorUname.setText(null);
        }
    }//GEN-LAST:event_txt_usernameKeyPressed

    private void but_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_addActionPerformed
        addSysUser();
    }//GEN-LAST:event_but_addActionPerformed

    private void but_addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_but_addKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            but_add.doClick();
        }
    }//GEN-LAST:event_but_addKeyPressed

    private void but_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_backActionPerformed
        new SystemUserManagement().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_but_backActionPerformed

    private void txt_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nameActionPerformed
//        jList1.grabFocus();
//        jList1.setSelectedIndex(0);
        if (txt_name.getText().equals("") && jScrollPane3.isVisible()) {
            jScrollPane3.setVisible(false);
        } else {
            jList1.grabFocus();
            jList1.setSelectedIndex(0);
        }
    }//GEN-LAST:event_txt_nameActionPerformed

    private void txt_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyReleased
        if (!txt_name.getText().trim().equals("")) {
            try {
                ResultSet search = DBConnect.search("select e.id,e.fname,e.lname,e.nic from employee e left join systemuser s on e.id=s.employee_id where (fname like '%"
                        + txt_name.getText().toLowerCase() + "%' or lname like '%" + txt_name.getText().toLowerCase() + "%') and e.stat!=0 and s.employee_id IS NULL");
                Vector v = new Vector();
                while (search.next()) {
                    v.add(search.getString("fname") + " " + search.getString("lname") + "-" + search.getString("nic"));
                }
                jList1.setListData(v);
                jScrollPane3.setVisible(true);
            } catch (ClassNotFoundException | SQLException ex) {
                SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
            }
        } else {
            jScrollPane3.setVisible(false);
        }
    }//GEN-LAST:event_txt_nameKeyReleased

    private void txt_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_IDActionPerformed
        if ((!txt_ID.getText().contains("v") && txt_ID.getText().length() == 12)
                || (txt_ID.getText().contains("v") && txt_ID.getText().length() == 10)) {
            int empId;
            txt_username.grabFocus();
            try {
                ResultSet search = DBConnect.search("select * from employee where nic='" + txt_ID.getText() + "'");
                if (search.first()) {
                    empId = search.getInt("id");
                    ResultSet search1 = DBConnect.search("select s.* from systemuser s inner join employee e on s.employee_id=e.id "
                            + "where e.nic='" + txt_ID.getText() + "'");
                    if (search1.first()) {
                        lab_errorNic.setText("* Employee is already a System User");
                        txt_ID.setText(null);
                        txt_ID.grabFocus();
                    } else {
                        txt_name.setText(search.getString("fname") + " " + search.getString("lname"));
                    }
                } else {
                    lab_errorNic.setText("* No such Employee");
                    txt_ID.setText(null);
                    txt_ID.grabFocus();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
            }
        }
    }//GEN-LAST:event_txt_IDActionPerformed

    private void pass_pass1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass1KeyPressed
        if (Character.getType(evt.getKeyCode()) == 12) {
            pass_pass1.setEditable(false);
        } else {
            pass_pass1.setEditable(true);
        }
    }//GEN-LAST:event_pass_pass1KeyPressed

    private void pass_pass1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass1FocusGained
        jCheckBox1.setSelected(false);
        if (pass_pass1.getPassword().length == 0 || Arrays.equals(pass_pass1.getPassword(), "Enter New Password".toCharArray())) {
            pass_pass1.setText(null);
        }
    }//GEN-LAST:event_pass_pass1FocusGained

    private void pass_pass1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass1FocusLost
        if (pass_pass1.getPassword().length == 0 || Arrays.equals(pass_pass1.getPassword(), "Enter New Password".toCharArray())) {
            jCheckBox1.setSelected(true);
            pass_pass1.setText("Enter New Password");
        } else {
            pass_pass1.setText(String.valueOf(pass_pass1.getPassword()));
        }
    }//GEN-LAST:event_pass_pass1FocusLost

    private void pass_pass1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_pass1ActionPerformed
        checkPass1();
    }//GEN-LAST:event_pass_pass1ActionPerformed

    private void pass_pass2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass2FocusGained
        pass_pass2.setEchoChar('*');
        if (pass_pass2.getPassword().length == 0 || Arrays.equals(pass_pass2.getPassword(), "Re-type Password".toCharArray())) {
            pass_pass2.setText(null);
        }
    }//GEN-LAST:event_pass_pass2FocusGained

    private void pass_pass2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass2FocusLost
        if (pass_pass2.getPassword().length == 0 || Arrays.equals(pass_pass2.getPassword(), "Re-type Password".toCharArray())) {
            pass_pass2.setEchoChar((char) 0);
            pass_pass2.setText("Re-type Password");
        } else {
            pass_pass2.setText(String.valueOf(pass_pass2.getPassword()));
        }
    }//GEN-LAST:event_pass_pass2FocusLost

    private void pass_pass2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass2KeyPressed
        if (Character.getType(evt.getKeyCode()) == 12) {
            pass_pass2.setEditable(false);
        } else {
            pass_pass2.setEditable(true);
        }
    }//GEN-LAST:event_pass_pass2KeyPressed

    private void pass_pass2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass2KeyReleased
        if (Arrays.equals(pass_pass2.getPassword(), pass_pass1.getPassword())) {
            setImage(new File("pics/check.png"), lab_img_checkpass);
        } else {
            setImage(new File("pics/close.png"), lab_img_checkpass);
        }
    }//GEN-LAST:event_pass_pass2KeyReleased

    private void pass_pass2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_pass2ActionPerformed
        checkPass2();
    }//GEN-LAST:event_pass_pass2ActionPerformed

    private void rb_add_activeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_add_activeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            rb_add_inactive.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_add_active.setSelected(true);
            but_add.grabFocus();
        }
    }//GEN-LAST:event_rb_add_activeKeyPressed

    private void rb_add_inactiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_add_inactiveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            rb_add_active.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_add_inactive.setSelected(true);
            but_add.grabFocus();
        }
    }//GEN-LAST:event_rb_add_inactiveKeyPressed

    private void txt_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernameActionPerformed
        try {
            ResultSet search = DBConnect.search("select username from systemuser where username='" + txt_username.getText() + "'");
            if (search.next()) {
                lab_errorUname.setText("* Username already exists, try another.");
                txt_username.setText(null);
            } else {
                pass_pass1.grabFocus();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
        }
    }//GEN-LAST:event_txt_usernameActionPerformed

    private void pass_pass3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass3FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_pass_pass3FocusGained

    private void pass_pass3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass3FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pass_pass3FocusLost

    private void pass_pass3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_pass3ActionPerformed
        checkPass3();
    }//GEN-LAST:event_pass_pass3ActionPerformed

    private void pass_pass3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass3KeyPressed
        if (Character.getType(evt.getKeyCode()) == 12) {
            pass_pass3.setEditable(false);
        } else {
            pass_pass3.setEditable(true);
        }
    }//GEN-LAST:event_pass_pass3KeyPressed

    private void txt_unameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_unameActionPerformed
        checkUsername();
    }//GEN-LAST:event_txt_unameActionPerformed

    private void lab_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_nameActionPerformed

    private void lab_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_nameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_nameKeyPressed

    private void lab_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_nameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_nameKeyReleased

    private void rb_activeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_activeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_active.setSelected(true);
            but_update.grabFocus();
        }
    }//GEN-LAST:event_rb_activeKeyPressed

    private void but_back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_back1ActionPerformed
        new SystemUserManagement().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_but_back1ActionPerformed

    private void rb_inactiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_inactiveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_inactive.setSelected(true);
            but_update.grabFocus();
        }
    }//GEN-LAST:event_rb_inactiveKeyPressed

    private void lab_nicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_nicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_nicActionPerformed

    private void lab_nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_nicKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_nicKeyPressed

    private void but_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_updateActionPerformed
        if (checkUsername() && checkPass4()) {
            updateSysUser();
            lab_nameerror.setText(null);
        }
    }//GEN-LAST:event_but_updateActionPerformed

    private void but_updateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_but_updateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_but_updateKeyPressed

    private void pass_pass4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass4FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_pass_pass4FocusGained

    private void pass_pass4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pass_pass4FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pass_pass4FocusLost

    private void pass_pass4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_pass4ActionPerformed
        checkPass4();
    }//GEN-LAST:event_pass_pass4ActionPerformed

    private void pass_pass4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass4KeyPressed
        if (Character.getType(evt.getKeyCode()) == 12) {
            pass_pass4.setEditable(false);
        } else {
            pass_pass4.setEditable(true);
        }
    }//GEN-LAST:event_pass_pass4KeyPressed

    private void pass_pass4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_pass4KeyReleased
        if (Arrays.equals(pass_pass4.getPassword(), pass_pass3.getPassword())) {
            setImage(new File("pics/check.png"), lab_img_checkpass1);
        } else {
            setImage(new File("pics/close.png"), lab_img_checkpass1);
        }
    }//GEN-LAST:event_pass_pass4KeyReleased

    private void txt_unameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_unameKeyTyped
        if (Character.isSpaceChar(evt.getKeyChar())) {
            txt_uname.setEditable(false);
        } else {
            txt_uname.setEditable(true);
        }
    }//GEN-LAST:event_txt_unameKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from main() method", ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SystemUserManagement().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane add_user_layer;
    private javax.swing.JButton but_add;
    public javax.swing.JButton but_addMem;
    private javax.swing.JButton but_back;
    private javax.swing.JButton but_back1;
    private javax.swing.JButton but_update;
    private javax.swing.JButton but_viewUpdateMem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cb_searchCategory;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lab_errorNic;
    private javax.swing.JLabel lab_errorUname;
    private javax.swing.JLabel lab_image;
    private javax.swing.JLabel lab_img_checkpass;
    private javax.swing.JLabel lab_img_checkpass1;
    private javax.swing.JTextField lab_name;
    private javax.swing.JLabel lab_nameerror;
    private javax.swing.JTextField lab_nic;
    private javax.swing.JLabel lab_passerror;
    private javax.swing.JLabel lab_passerror1;
    private javax.swing.JLabel lab_passerror2;
    private javax.swing.JLabel lab_passerror3;
    private javax.swing.JPasswordField pass_pass1;
    private javax.swing.JPasswordField pass_pass2;
    private javax.swing.JPasswordField pass_pass3;
    private javax.swing.JPasswordField pass_pass4;
    private javax.swing.JRadioButton rb_active;
    private javax.swing.JRadioButton rb_add_active;
    private javax.swing.JRadioButton rb_add_inactive;
    private javax.swing.JRadioButton rb_inactive;
    private javax.swing.JTextField txt_ID;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_uname;
    private javax.swing.JTextField txt_username;
    private javax.swing.JLayeredPane update_user_layer;
    private javax.swing.JLayeredPane view_user_layer;
    // End of variables declaration//GEN-END:variables

    private void LoadTableData() {
        setColumnSizes();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        try {
            ResultSet search = DBConnect.search("select s.id as sid,s.username,s.stat as s_stat,e.* from employee e inner join systemuser s where e.id=s.employee_id");
            while (search.next()) {
                Vector v = new Vector();
                v.add(search.getString("sid"));
                v.add(search.getString("fname"));
                v.add(search.getString("lname"));
                v.add(search.getString("username"));
                v.add(search.getString("nic"));
                v.add(search.getString("phone"));
                if (search.getString("gender").equals("M")) {
                    v.add("Male");
                } else {
                    v.add("Female");
                }

                if (search.getBoolean("s_stat") == true) {
                    v.add("Active");
                } else {
                    v.add("Inactive");
                }

                dtm.addRow(v);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
        }

    }

    void setButtons() {
        jButton5.setOpaque(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setBorderPainted(false);
        jButton6.setOpaque(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setBorderPainted(false);
    }

    private void setColumnSizes() {
        //jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);

        jTable1.getColumnModel().getColumn(0).setMaxWidth(60);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(renderer);

//        jTable1.getColumnModel().getColumn(5).setMaxWidth(60);
//        jTable1.getColumnModel().getColumn(6).setMaxWidth(60);
    }

    private void searchUser() {
        String searchCategory = cb_searchCategory.getSelectedItem().toString();
        String searchString = txt_search.getText();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        jTable1.clearSelection();

        switch (searchCategory) {
            case "ID":
                for (int row = 0; row < dtm.getRowCount(); row++) {
                    if (dtm.getValueAt(row, 0).toString().contains(searchString)) {
                        jTable1.getSelectionModel().addSelectionInterval(row, row);
                        
                    }
                }   break;
            case "First Name":
                for (int row = 0; row < dtm.getRowCount(); row++) {
                    if (dtm.getValueAt(row, 1).toString().contains(searchString)) {
                        jTable1.getSelectionModel().addSelectionInterval(row, row);
                        
                    }
                }   break;
            case "User Name":
                for (int row = 0; row < dtm.getRowCount(); row++) {
                    if (dtm.getValueAt(row, 3).toString().contains(searchString)) {
                        jTable1.getSelectionModel().addSelectionInterval(row, row);
                        
                    }
                }   break;
            case "NIC":
                for (int row = 0; row < dtm.getRowCount(); row++) {
                    if (dtm.getValueAt(row, 4).toString().contains(searchString)) {
                        jTable1.getSelectionModel().addSelectionInterval(row, row);
                        
                    }
                }   break;
            case "Mobile No.":
                for (int row = 0; row < dtm.getRowCount(); row++) {
                    if (dtm.getValueAt(row, 5).toString().contains(searchString)) {
                        jTable1.getSelectionModel().addSelectionInterval(row, row);
                        
                    }
                }   break;
            default:
                break;
        }

        if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "No match found!");
        }
    }

    private void setImage(File img, JLabel label) {
        try {
            Image image = ImageIO.read(new FileInputStream(img));
            image = image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
            label.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from setImage() method", ex);
        }
    }

    private void checkPass1() {
        if (pass_pass1.getPassword().length == 0) {
            pass_pass1.grabFocus();
            lab_passerror.setText("* Can not be Empty");
        } else {
            if (pass_pass1.getPassword().length < 8) {
                pass_pass1.grabFocus();
                lab_passerror.setText("* Must be at least 8 charachters long");
            } else {
                lab_passerror.setText(null);
                pass_pass2.grabFocus();
            }
        }
    }

    private void checkPass3() {
        if (pass_pass3.getPassword().length == 0) {
            pass_pass3.grabFocus();
            lab_passerror3.setText("* Can not be Empty");
        } else {
            if (pass_pass3.getPassword().length < 8) {
                pass_pass3.grabFocus();
                lab_passerror3.setText("* Must be at least 8 charachters long");
            } else {
                lab_passerror3.setText(null);
                pass_pass4.grabFocus();
            }
        }
    }

    private boolean checkPass2() {
        passCheck = false;
        if (Arrays.equals(pass_pass2.getPassword(), pass_pass1.getPassword())) {
            lab_passerror1.setText(null);
            rb_add_active.grabFocus();
            passCheck = true;
        } else {
            lab_passerror1.setText("*Passwords does not match");
            pass_pass2.grabFocus();
            pass_pass2.setText(null);
            passCheck = false;
        }
        return passCheck;
    }

    private boolean checkPass4() {
        passCheck = false;
        if (Arrays.equals(pass_pass4.getPassword(), pass_pass3.getPassword())) {
            lab_passerror2.setText(null);
            rb_active.grabFocus();
            passCheck = true;
        } else {
            lab_passerror2.setText("*Passwords does not match");
            pass_pass4.grabFocus();
            pass_pass4.setText(null);
            passCheck = false;
        }
        return passCheck;
    }

    Thread view = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {
                if (jCheckBox1.isSelected()) {
                    pass_pass1.setEchoChar((char) 0);
                    pass_pass2.setEchoChar((char) 0);
                } else {
                    pass_pass1.setEchoChar('*');
                    pass_pass2.setEchoChar('*');
                }
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    SystemLogger.initLogger(SystemUserManagement.class).error("Exception from Thread view", ex);
                }
            }
        }

    });
    Thread view2 = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {
                if (jCheckBox2.isSelected()) {
                    pass_pass3.setEchoChar((char) 0);
                    pass_pass4.setEchoChar((char) 0);
                } else {
                    pass_pass3.setEchoChar('*');
                    pass_pass4.setEchoChar('*');
                }
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    SystemLogger.initLogger(SystemUserManagement.class).error("Exception from Thread view2", ex);
                }
            }
        }

    });

    private void addSysUser() {
        String name = null;
        String empId = null;
        boolean unameAvailability = true;
        try {
            ResultSet search = DBConnect.search("select id,fname,lname,nic from employee where nic='" + txt_ID.getText() + "'");
            ResultSet searchUname = DBConnect.search("select username from systemuser where username='" + txt_username.getText() + "'");
            if (search.next()) {
                name = search.getString("fname") + " " + search.getString("lname");
                empId = search.getString("id");
            } else {
                empId = null;
            }
            unameAvailability = searchUname.next();
        } catch (ClassNotFoundException | SQLException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
        }
        if (txt_name.getText().equals("") || !txt_name.getText().equals(name)) {
            txt_name.setText(null);
            txt_ID.setText(null);
            txt_ID.grabFocus();
            lab_errorNic.setText("* Enter employee name and select from the drop down list");
        } else if (txt_ID.getText().equals("") || empId == null) {
            txt_name.setText(null);
            txt_ID.setText(null);
            txt_ID.grabFocus();
            lab_errorNic.setText("* Enter employee NIC and press enter to confirm validity");
        } else if (txt_username.getText().equals("") || unameAvailability == true) {
            lab_errorUname.setText("* Username already exists, try another.");
            txt_username.setText(null);
            txt_username.grabFocus();
        } else if (checkPass2() == false) {
            lab_passerror1.setText("*Passwords does not match");
            pass_pass1.grabFocus();
            pass_pass1.setText(null);
            pass_pass2.setText(null);
        } else if (!rb_add_active.isSelected() && !rb_add_inactive.isSelected()) {
            rb_add_active.grabFocus();
        } else {
            int stat = (rb_add_active.isSelected()) ? 1 : 0;
            try {
                DBConnect.iud("insert into systemuser (employee_id,username,password,stat) "
                        + "values ('" + empId + "','" + txt_username.getText() + "','" 
                        + String.valueOf(PasswordEncription.encrypt(new String(pass_pass2.getPassword()))) + "','" + stat + "')");
                JOptionPane.showMessageDialog(rootPane, "System user added successfully!");
                clearFields();
                txt_name.grabFocus();
            } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
                SystemLogger.initLogger(SystemUserManagement.class).error("Exception from INSERT query", ex);
            }
        }
    }

    private void clearFields() {
        txt_ID.setText(null);
        txt_name.setText(null);
        txt_username.setText(null);
        pass_pass1.setText(null);
        pass_pass2.setText(null);
        buttonGroup1.clearSelection();
        lab_img_checkpass.setIcon(null);
    }

    boolean unameCheck;
    String username;
    String password;

    private boolean checkUsername() {
        ResultSet search;
        unameCheck = false;
        try {
            search = DBConnect.search("select username from systemuser");
            while (search.next()) {
                if (!txt_uname.getText().trim().equals(username)) {
                    if (txt_uname.getText().equals(search.getString("username"))) {
                        if (!search.getString("username").equals(username)) {
                            txt_uname.grabFocus();
                            lab_nameerror.setForeground(Color.red);
                            lab_nameerror.setText("* Username already exists");
                            unameCheck = false;
                            break;
                        }
                    } else {
                        lab_nameerror.setText(null);
                        pass_pass3.grabFocus();
                        unameCheck = true;
                    }
                } else {
                    lab_nameerror.setForeground(Color.BLUE);
                    lab_nameerror.setText("- Continue using the current username");
                    pass_pass3.grabFocus();
                    unameCheck = true;
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from SELECT query", ex);
        }
        return unameCheck;
    }

    private void updateSysUser() {
        String stat = (rb_active.isSelected()) ? "1" : "0";
        try {
            DBConnect.iud("update systemuser set username='" + txt_uname.getText() + "',"
                    + " password='" + PasswordEncription.encrypt(String.valueOf(pass_pass3.getPassword())) + "', stat='" + stat + "' where id='" + id + "'");
            JOptionPane.showMessageDialog(rootPane, "System user update successful!");
            lab_img_checkpass.setIcon(null);
        } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
            SystemLogger.initLogger(SystemUserManagement.class).error("Exception from UPDATE query", ex);
        }
    }
}
